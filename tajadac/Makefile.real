SHELL      = bash

CC         = gcc
CFLAGS     = -ggdb -Wall -Wextra -I. $(defines:%=-D%)

CXX        = g++
CXXFLAGS   = -ggdb -Wall -Wextra -I. $(defines:%=-D%) -std=gnu++0x

YACC       = bison
YACCFLAGS  = --warnings=all --report=all -g -x

CPP        = g++ -E
CPPFLAGS   = -P -I.

LDLIBS     = re2


# `_GNU_SOURCE` porque probablemente querremos alguna cosa bonita de glibc.
# `nullptr` porque mi GCC apesta.
# `TAJADA_DEBUG` porque uno que otro código por ahí está instrumentado si eso es 1.
# `TAJADA_UNUSED_PARAMETER` porque `-Wextra`.
defines    = nullptr=NULL _GNU_SOURCE TAJADA_DEBUG=0 'TAJADA_UNUSED_PARAMETER(p)=static_cast<void>(p);'


cpp-magic  = $(CPP) $(CPPFLAGS) -DMACRO_MAGIC -
build-exec = $(CXX) $(CXXFLAGS) -o $@ $^ $(LDLIBS:%=-l%)



sources := $(shell shopt -s globstar && echo **/*.cc)

$(sources:%.cc=dep/%.d): dep/%.d: %.cc
	@echo "Calculating dependencies for $<"
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -E -MM -MF $@ $<
	@printf '%s\n'                   \
                '1s@^@$@ obj/$(dir $<)@' \
                'wq'                     \
                | ed -s $@



$(sources:%.cc=obj/%.o): obj/%.o: %.cc
	@echo "Building $<"
	@mkdir -p $(dir $@)
	@$(CXX) $(CXXFLAGS) -c $< -o $@



.PHONY: all

all: tajadac



# El ejecutable principal combina todo el código.  Si hubiera más de uno, esto se complicaría…
tajadac: $(sources:%.cc=obj/%.o)
	@echo "Linking $@"
	@$(build-exec)


# Las dependencias de archivos generados deben escribirse explícitamente.
#              .d               .o: parser.tab.hh stack.hh location.hh position.hh
        dep/lex.d        obj/lex.o: parser.tab.hh stack.hh location.hh position.hh
       dep/main.d       obj/main.o: parser.tab.hh stack.hh location.hh position.hh
 dep/parser.tab.d obj/parser.tab.o: parser.tab.hh stack.hh location.hh position.hh
      dep/scope.d      obj/scope.o:                        location.hh

# Cosas que se usaban cuando pensaba que podría generar parte de las clases del AST automáticamente a partir de una descripción breve.  Pero como no puedes modificar una clase que ya está declarada usando otra declaración, no sirve de mucho.  Los trucos lindos de metaprogramación con Ruby no aplican a C++ (duh). :-(
#ast.gen.cc ast.gen.hh: make_ast_classes data/ast/classes data/ast/members
#	./make_ast_classes data/ast/classes data/ast/members ast.gen.cc ast.gen.hh

dep/parser.tab.d: parser.tab.cc

# Todos los archivos generados por `bison` y el pequeño loco script (que debería ir en un archivo aparte) dependen de donde está el pequeño loco script (este Makefile) y de la seudoentrada de `bison`:
location.hh parser.dot parser.output parser.tab.cc parser.tab.hh parser.xml position.hh stack.hh token_data.out token_data_line.out: parser.y tokens.hh Makefile.real
	@printf '%s\n'                                                                    \
                '#include "tokens.hh"'                                                    \
                '#define X(tag, description, r, type) type|%token@<tag>@tag@description!' \
                'TAJADA_TOKEN_DATA(X)'                                                    \
                | $(cpp-magic)                                                            \
                | sed 's/ \?! \?/\n/g'                                                    \
                | sed                                                                     \
                        -e 's/^void|\(%token@\)<[^>]*>\(@[^ ]*@\)u8\(.*\)$$/\1 \2\3/'     \
                        -e 's/^[^|]*|\(%token@<[^>]*>@[^ ]*@\)u8\(.*\)$$/\1\2/'           \
                        -e 's/<INFIX\([LR]\|\)[0-9]\+>/<infix_op>/g'                      \
                        -e 's/" TAJADA_PASTE \(u8\)\?"//g'                                \
                | column -t -s @                                                          \
                > token_data.out
	@printf '%s\n'     \
                ''         \
                '%union {' \
                >> token_data.out
	@printf '%s\n'                                       \
                '#include "tokens.hh"'                       \
                '#define X(tag, d, r, type) type|type@tag;!' \
                'TAJADA_TOKEN_DATA(X)'                       \
                | $(cpp-magic)                               \
                | sed 's/ \?! \?/\n/g'                       \
                | sed                                        \
                        -e '/^void|/d'                       \
                        -e 's/^[^|]*|/        /'             \
                        -e '/^$$/d'                          \
                | column -t -s @                             \
                >> token_data.out
	@printf '%s\n' '}' >> token_data.out
	@tr -d '\n' < token_data.out > token_data_line.out
	@printf '%s\n' '' >> token_data_line.out
	@printf '%s\n'                                            \
                '1s@.*@@'                                         \
                '1s@$$@/* THIS FILE WAS AUTOMATICALLY GENERATED@' \
                '1s@$$@ BY THE BUILD SCRIPTS USING THE CONTENTS@' \
                '1s@$$@ OF “tokens.hh” AND “parser.y”; EDIT@'     \
                '1s@$$@ THOSE FILES INSTEAD OR YOUR CHANGES@'     \
                '1s@$$@ WILL BE LOST ONCE IT’S REGENERATED */@'   \
                '/^%token_data$$/r token_data_line.out'           \
                '/^%token_data$$/d'                               \
                'w $<y'                                           \
                'q'                                               \
                | ed -s $<
	@echo "Generating parser"
	@$(YACC) $(YACCFLAGS) $<y



-include $(sources:%.cc=dep/%.d) dep/parser.tab.d
